
< 동기, 비동기 (synchronous, asynchronous) >
===============================================================================

[ 동기 (synchronous) ]
-----------------------------------------------------------------------------------------------------------
요청 처리가 완료 된 후 다음 요청을 처리 하는 방식으로,
이전 요청을 처리하는 시간이 다음 요청에 영향을 준다.
요청과 응답이 같은 시간대에 있다.
"일반적으로 작성한 코드는 보통 동기 방식으로 처리"된다.

ex)
function add() {...}
function minus() {...}
add();    // 이 코드는 동기적으로 실행됨
minus();    // 이 코드는 동기적으로 실행됨

setTimeout(add, 1000);    // 이 코드는 비동기적으로 실행됨
setTimeout(minus, 1000);    // 이 코드는 비동기적으로 실행됨
-----------------------------------------------------------------------------------------------------------

[ 비동기 (asynchronous) ]
-----------------------------------------------------------------------------------------------------------
하나의 요청 처리가 완료되기 전에 다음 요청을 처리 하는 방식.
( 즉, 요청하는 쪽과 처리하는 쪽이 구분되어있다. )
요청과 응답이 다른 시간대에 일어날 수 있다.


~ 비동기적 코드의 뜻과 대표적인 비동기적인 코드의종류 ~

웹브라우저 자체가 아닌 별도의 대상에 무언가를 요청하고,
그에 대한 응답이 왔을 때 비로소 어떤 함수를 실행하도록 대기하는등
별도의 요청, 실행 대기, 보류 등과 관련된 코드는 비동기적인 코드다.
XMLHttpRequest(), addEventListener(), setTimeout() 등을 사용한 코드들.


~ 비동기적인 코드의 특징 ~

말 그대로 "비동기"라는 특징을 가진다.
비동기 작업은 성공 혹은 실패한다.
비동기 작업은 요청하는 쪽과 처리하는 쪽이 구분되어있다.


~ 비동기 처리 제어를 하는 이유 ~

"우리가 필요에 의해 사용"하는 XMLHttpRequest()를 이용한 서버에 대한 요청,
addEventListener()를 이용한 이벤트처리 대기, setTimeout()를 이용한 실행 보류 등이
비동기적인 작업이기 때문에 이 "작업들의 순서"를 우리가 원하는 대로 제어하기 위해서
비동기처리 제어를 해야 하고, 비동기 처리를 제어하는 Promise, async & await 등이 필요하다

( 예를 들면, 브라우저가 서버에 웹페이지에대한 정보를 요청하고 요청결과를 받고 그 결과를
화면에 표시해야 하지만, '별도의 요청' 관련코드는 비동기적인 코드이기 때문에
웹페이지에대한 정보를 요청하고 그 결과를 받기도 전에 화면표시를 해버리는 불상사가 일어난다.
이런 비동기 처리의 문제를 해결하기 위해 비동기 처리를 제어해야 한다는 것이다.)
-----------------------------------------------------------------------------------------------------------

===============================================================================








< 비동기 처리 제어 (asynchronous control) >
===============================================================================

[ 비동기적인 코드의 문제점 ]
-----------------------------------------------------------------------------------------------------------
코드의 진행 "순서"를 제어할 수 없다는 점이 비동기적인 코드의 문제점이다.


~ 예시코드 - 1 ~

function asyncWork() {
    setTimeout(() => {
        console.log('첫번째');
    }, 3000 * Math.random());

    setTimeout(() => {
        console.log('두번째');
    }, 3000 * Math.random());

    setTimeout(() => {
        console.log('세번째');
    }, 3000 * Math.random());
}
asyncWork();


~ 예시코드 - 1 설명 ~

순서대로 나열된 setTimeout() 함수들이 각각 최대 3초의 random 시간 후
차례대로 동작할 것 같지만, 실제로 세 함수는 거의 동시에 시작한다고 볼 수 있습니다.

그 이유는 비동기 함수들도 위에서 아래로 순서대로 호출되는데,
비동기 함수들은 함수 호출이 일어나면 콜 스택이 아닌 Web API로 넘어가서 코드의 처리가 이루어지고,
처리가 끝난 비동기 함수들은 콜백 큐에 쌓이게 되고 콜 스택이 비었을 때 쌓인순서대로 콜 스택에 넘어가서 실행이됩니다.
이 때 콜 스택은 Web API에서 개별적으로 처리되는 비동기 코드의 존재를 인지하지 못합니다.
때문에, 먼저 호출된 함수의 결과를 받기도 전에 바로 다음 함수를 호출해 버립니다.
위의 이유들로 먼저 호출된 함수가 가장 먼저 완료가 될 것이라고 보장할 수 없게된다는걸 알 수 있을겁니다.
( 가장 먼저 처리가 끝나는 함수가 가장 먼저 실행이 되겠죠. )
그리고 같은 이유로 딜레이시간이 겹쳐져서 우리가 대략적으로 기대한만큼 딜레이가 안된다는 것을 알 수 있죠.

그러므로, 실제 예시코드 - 1 의 출력은
"실행 순서"대로 '첫번째', '두번째', '세번째' 가 아니라
"Random 순서"로 '첫번째', '두번째', '세번째' 가 출력됩니다.
-----------------------------------------------------------------------------------------------------------


[ 비동기 처리 제어 방법 (1) - Callback_funciton ]
-----------------------------------------------------------------------------------------------------------
~ 예시코드 - 2 ~

function asyncWork() {
    setTimeout(() => {
        console.log('첫번째');
        setTimeout(() => {
            console.log('두번째');
            setTimeout(() => {
                console.log('세번째');
            }, 3000 * Math.random());
        }, 3000 * Math.random());
    }, 3000 * Math.random());
}
asyncWork();


~ 예시코드 - 2 설명 ~

각각의 setTimeout() 함수는 먼저 실행될 setTimeout() 함수의 callback 함수안에서 호출되고 있습니다.
각 callback 함수 내에서는 위에서 아래의 순서로 console.log("순서 표시") 와
다음 setTimeout() 을 호출해주면서 순서 제어 문제를 해결했습니다.
그리고 딜레이시간도 겹치지 않고 따로 실행되었음을 알 수 있습니다.

그러므로, 예시코드 - 2 의 출력은
"실행 순서"로 '첫번째', '두번째', '세번째' 가 출력됩니다.


~ 이 방법의 문제점 ~

콜백 함수를 익명 함수로 전달하는 과정이 반복되어 코드의 들여쓰기 수준이 감당하기 힘들 정도로
깊어지기 때문에 가독성이 떨어지고, 코드를 수정하기도 어렵다는 큰 단점이 있습니다.
그래서, 위 예시코드 - 2 와 같은 코드를 콜백지옥(callback hell) 이라고도 부릅니다.
-----------------------------------------------------------------------------------------------------------


[ 비동기 처리 제어 방법 (2) - Promise ]
-----------------------------------------------------------------------------------------------------------
 - 비동기에서 성공과 실패를 구분(분리)해서 메서드를 수행한다  - 
-----------------------------------------------------------------------------------------------------------


[ 비동기 처리 제어 방법 (3) - Generator ]
-----------------------------------------------------------------------------------------------------------
 -   - 
-----------------------------------------------------------------------------------------------------------


[ 비동기 처리 제어 방법 (4) - async & await ]
-----------------------------------------------------------------------------------------------------------
 -   - 
-----------------------------------------------------------------------------------------------------------

===============================================================================




















