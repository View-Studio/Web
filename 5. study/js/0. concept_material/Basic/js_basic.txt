
< 런타임 (Run Time) >
===============================================================================
어떤 프로그래밍 언어가 동작할 수 있는 프로그램 ( 프로그래밍 언어가 구동되는 환경 )


[JavaScript의 런타임]

1. 브라우저
2. Node.js
===============================================================================







< 자바스크립트 특징 > (밑의 < 용어 설명 > 참조)
===============================================================================
자바스크립트는 싱글스레드, 동기식, 논-블로킹 언어이다
하나의 스레드 = 하나의 콜 스택 = 한번에 하나의 작업



[ 자바스크립트 런타임의 구성 요소 ]
-----------------------------------------------------------------------------------------------------------
자바스크립트 엔진 ( 메모리 힙, 콜 스택 )
Web API
콜백 큐
이벤트 루프
렌더 큐
-----------------------------------------------------------------------------------------------------------



[ 자바스크립트 "엔진" V8의 구조 ]
-----------------------------------------------------------------------------------------------------------
Memory Heap : 
메모리 할당이 일어나는 곳

Call stack: 
코드 실행에 따라 스택 프레임이 쌓이는 곳(LIFO 후입 선출)
-----------------------------------------------------------------------------------------------------------



[ 싱글 스레드 ]
-----------------------------------------------------------------------------------------------------------
하나의 힙 영역과 하나의 콜 스택을 가집니다.
하나의 콜 스택을 가진다는 의미는 한 번에 한 가지 일 밖에 하지 못한다는 의미다.
그래서, 웹 브라우저에서 코드가 실행될 때
하나의 스택프레임에 해당하는 코드들이 종료 될 때 까지
어떠한 동작도 하지 않는 상태가 됩니다.
이런 식으로 콜 스택이 멈춘 상태를 "블로킹" 상태라고 합니다.
-----------------------------------------------------------------------------------------------------------



[ "동기식"언어인 JS가 "비동기적"으로 동작할 수 있는 이유 ]
------------------------------------------------------------------------------------------------------------
자바스크립트의 실행 환경(Runtime)과 관련이 있다. (브라우저와 관련이 있음)
브라우저(런타임)에서는 JS프로그램은 자바스크립트 엔진 만으로 동작하지 않는다.
브라우저(런타임)에서 DOM 조작이나 AJAX 같은 비동기 처리를 위한 "Web API"를 제공
(브라우저와 Node.js에는 블로킹 함수가 거의 없고 대부분 비동기로 만들어 졌기 때문이다)
또, 이를 제어하기 위해 이벤트 루프(Event Loop), Callback Queue(= task Queue)가 존재한다.
------------------------------------------------------------------------------------------------------------


===============================================================================








< 용어 설명 >
===============================================================================

[ 블로킹과 논-블로킹 ]
-----------------------------------------------------------------------------------------------------------
블로킹 :
직접 제어할 수 없는 작업이 끝날 때까지 기다려야 하는 경우를 말한다. (동기적)

논-블로킹 :
직접 제어할 수 없는 작업이 완료되기 전에 제어권을 넘겨주는 경우를 말한다. (비동기적)
-----------------------------------------------------------------------------------------------------------



[ 동기(synchronous : 동시에 일어나는) ]
------------------------------------------------------------------------------------------------------------

 - 요청을 보낸 후 응답을 받아야지만 다음 동작이 이루어지는 방식
   요청을 하면 시간이 얼마가 걸리던지 요청한 자리에서 결과가 주어져야 다음 동작 수행


[장점과 단점]
장점 - 동기방식은 설계가 매우 간단하고 직관적이다

단점 - 결과가 주어질 때까지 아무것도 못하고 대기해야 한다
------------------------------------------------------------------------------------------------------------



[ 비동기(Asynchronous : 동시에 일어나지 않는) ]
------------------------------------------------------------------------------------------------------------

 - 요청을 보낸 후 응답을 받지 않아도 다음 동작이 이루어지는 방식


[장점과 단점]
장점 - 결과가 주어지는데 시간이 걸리더라도 그 시간 동안
        다른 작업을 할 수 있으므로 자원을 효율적으로 사용할 수 있다

단점 - 동기보다 복잡하다
------------------------------------------------------------------------------------------------------------



[ 콜백 ( Call Back ) ]
------------------------------------------------------------------------------------------------------------
1. 다른 함수가 부르는 함수
2. 큐에 쌓일 비동기식 함수 ( 콜백은 다른 함수가 실행을 끝낸 뒤 실행되는 함수 )
------------------------------------------------------------------------------------------------------------
===============================================================================






















