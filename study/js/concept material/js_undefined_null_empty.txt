===============================================================================

<undefined>  (예시 코드 - 1 참조)
-----------------------------------------------------------------------------------------------------------
자바스크립트에서 기본형 데이터 타입에 속하는 비어있음을 뜻 하는 값.


[undefined를 가질 수 있는 두 가지 경우]

1. 사용자가 undefined를 명시적으로 지정하는 경우

2. 자바스크립트 엔진이 부여하는 경우
(1) - 값을 대입하지 않은 변수에 접근할 때
(2) - 객체 내부의 존재하지 않는 프로퍼티에 접근할 때
(3) - return문이 없거나, 호출되지 않는 함수를 실행할 때 

하지만, 혼란을 줄 수 있기 때문에 undefined를 사용자가 직접 지정하는 것은 지양하는 것( 하지 않는 것 )이 좋다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 1
-----------------------------------------------------------------------------------------------------------
var a;

console.log(a);    // undefined


var obj = {
  first: 1,
  second: 'two'
};

console.log(obj.third);    // undefined


var arr1 = [];

console.log(arr1[0]);    // undefined
console.log(arr1[1]);    // undefined

var arr2 = [];
arr2[1] = "hello";

console.log(arr2);    // [empty, "hello"]
console.log(arr2[0]);    // undefined
console.log(arr2[1]);    // hello
console.log(arr2[2]);    // undefined


var func1 = function() {};
var ham1 = func1();
console.log(ham1);    // undefined

var func2 = function(a, b) {
  var num = a + b;
};
var ham2 = func2()
console.log(ham2);    // undefined
-----------------------------------------------------------------------------------------------------------




<empty>  (예시 코드 - 1 참조) 과 (예시 코드 - 2 참조)
-----------------------------------------------------------------------------------------------------------
비어 있는 상태를 뜻 하는 기호

[empty의 특징]
(1). length 프로퍼티의 값이 0이 아닌 빈 배열에 지정되는 기호이다
(2). empty는 값 자체가 존재하지 않음을 뜻한다 ( 키는 있어도 값은 없기 때문에 프로퍼티가 존재하지 않음 )
(3). (2)의 이유 때문에 배열의 인덱스(프로퍼티 키)로 접근해도 undefined가 반환된다
(4). (2)의 이유 때문에 배열의 순회 메서드 대상에서 제외된다
-----------------------------------------------------------------------------------------------------------

예시 코드 - 2
-----------------------------------------------------------------------------------------------------------
var arr1 = [];
arr1[1] = "hello";

console.log(arr1);    // [empty, "hello"]
console.log(arr1[0]);    // undefined
console.log(arr1[1]);    // hello


var arr3 = new Array(5);
console.log(arr2);    // [empty x 5]

let arr2 = [];
arr2[1] = 10;
console.log(arr2);


arr2.forEach(function (v, i) { console.log(v, i); });     // 1 10 (0번째 인덱스 제외)
arr2.map(function (v, i) { return v + i; });     // [empty, 2]
arr2.filter(function (v) { return !v; });     // []
arr2.reduce(function (acc, cur) { return acc + cur; }, '');     // 10
-----------------------------------------------------------------------------------------------------------




<null>  (예시 코드 - 3 참조)
-----------------------------------------------------------------------------------------------------------
사용자가 "비어있음"을 명시적으로 나타내기 위해 만들어진 기본형 데이터 타입


[typeof null의 버그]

typeof null 의 값은 null이 아니라 object이다.
이는 자바스크립트 자체의 버그이다.
따라서, 어떤 변수의 값이 null인지의 여부를 판단할 때는 일치연산자(===)를 사용해야한다.
(동등연산자(==)는 null과 undefined가 같다고 나오기 때문에 일치연산자 사용)

-----------------------------------------------------------------------------------------------------------

예시 코드 - 3
-----------------------------------------------------------------------------------------------------------
var n = null;
console.log(typeof n);    // object

console.log(n == undefined);    // true
console.log(n == null);    // true

console.log(n === undefined);    // false
console.log(n === null);    // true
-----------------------------------------------------------------------------------------------------------

===============================================================================


















[출처] : https://joooing.tistory.com/entry/undefined-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%95%8C%EA%B8%B0-1-undefined-empty-%F0%9F%A7%90