===============================================================================

<프로퍼티의 종류>


데이터 프로퍼티(data property)
-----------------------------------------------------------------------------------------------------------
값을 저장하기 위한 프로퍼티. 일반적으로 사용하는 프로퍼티는 데이터 프로퍼티입니다.
데이터 프로퍼티 조작 방법에 대해선 모두 알고 계실 것이라 생각합니다.
-----------------------------------------------------------------------------------------------------------

접근자 프로퍼티(accessor property)
-----------------------------------------------------------------------------------------------------------
값이 없음.
프로퍼티를 읽거나 쓸 때 호출하는 함수를 값 대신에 지정할 수 있는 프로퍼티입니다.
접근자 프로퍼티의 본질은 함수인데, 이 함수는 값을 획득(get)하고 설정(set)하는 역할을 담당합니다.
그런데 외부 코드에서는 함수가 아닌 일반적인 프로퍼티처럼 보입니다.
-----------------------------------------------------------------------------------------------------------

ps.
-----------------------------------------------------------------------------------------------------------
프로퍼티는 접근자 프로퍼티(get/set 메서드를 가짐)나 데이터 프로퍼티(value를 가짐) 중
한 종류에만 속하고 둘 다에 속할 수 없다는 점을 항상 유의해야한다.
-----------------------------------------------------------------------------------------------------------

===============================================================================




===============================================================================

<접근자 프로퍼티(accessor property)>


접근자 프로퍼티 (예시 코드 - 1 참조)
-----------------------------------------------------------------------------------------------------------
'getter(획득자)'와 ‘setter(설정자)’ 메서드로 표현됩니다.
객체 리터럴 안에서 getter와 setter 메서드는 get과 set으로 나타낼 수 있습니다.

바깥 코드에선 접근자 프로퍼티를 일반 프로퍼티처럼 사용할 수 있습니다.
접근자 프로퍼티를 사용하면 함수처럼 호출 하지 않고,
일반 프로퍼티에서 값에 접근하는 것처럼 평범하게
obj.propName을 사용해 프로퍼티 값을 얻을 수 있습니다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 1
-----------------------------------------------------------------------------------------------------------
let obj = {
 get propName() {
   // getter, obj.propName을 실행할 때 실행되는 코드
 },

 set propName(value) {
   // setter, obj.propName = value를 실행할 때 실행되는 코드
 }
};
-----------------------------------------------------------------------------------------------------------




getter 메서드 (예시 코드 - 2 참조)
-----------------------------------------------------------------------------------------------------------
getter 메서드는 user.fullName 을 사용해 프로퍼티를 읽으려고 할 때 실행됩니다.
-----------------------------------------------------------------------------------------------------------

setter 메서드 (예시 코드 - 2 참조)
-----------------------------------------------------------------------------------------------------------
setter 메서드는 user.fullName = value (으)로 프로퍼티에 값을 할당하려 할 때 실행됩니다.
-----------------------------------------------------------------------------------------------------------

getter&setter 메서드 종합 (예시 코드 - 2 참조)
-----------------------------------------------------------------------------------------------------------
getter와 setter 메서드를 구현하면 객체엔 fullName이라는 '가상’의 프로퍼티가 생깁니다.
가상의 프로퍼티는 읽고 쓸 순 있지만 실제로는 존재하지 않습니다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 2
-----------------------------------------------------------------------------------------------------------
let user = {
  name: "John",
  surname: "Smith",

  get fullName() {
    return `${this.name} ${this.surname}`;
  }
  
  set fullName(value) {
    [this.name, this.surname] = value.split(" ");
  }
};

// 주어진 값을 사용해 set fullName이 실행됩니다.
user.fullName = "Alice Special"

alert(user.fullName);     // Alice Special
alert(user.name);     // Alice
alert(user.surname);     // Specia
-----------------------------------------------------------------------------------------------------------




접근자 프로퍼티의 설명자 맴버  (예시 코드 - 3 참조)
-----------------------------------------------------------------------------------------------------------
데이터 프로퍼티의 설명자 맴버와 접근자 프로퍼티의 설명자 맴버는 다릅니다.
접근자 프로퍼티엔 "value"와 "writable 플래그"가 없는 대신에 get과 set이라는 함수가 있습니다.

[접근자 프로퍼티가 가지는 설명자 맴버]

1. get – 인수가 없는 함수로, 프로퍼티를 읽을 때 동작함
2. set – 인수가 하나인 함수로, 프로퍼티에 값을 쓸 때 호출됨
3. enumerable – 데이터 프로퍼티와 동일함
4. configurable – 데이터 프로퍼티와 동일함
-----------------------------------------------------------------------------------------------------------

예시 코드 - 3
-----------------------------------------------------------------------------------------------------------
let user = {
  name: "John",
  surname: "Smith"
};

Object.defineProperty(user, 'fullName', {
  get() {
    return `${this.name} ${this.surname}`;
  },

  set(value) {
    [this.name, this.surname] = value.split(" ");
  }
});

alert(user.fullName);     // John Smith

for(let key in user) alert(key);     // name, surname
-----------------------------------------------------------------------------------------------------------

===============================================================================





===============================================================================

<getter와 setter의 활용>


일반적인 "프로퍼티 값 읽기, 수정하기" 객체  (예시 코드 - 4 참조)
-----------------------------------------------------------------------------------------------------------
일반적으로 이름을 읽고 수정하는 객체는 다음과 같이 이름을 수정하는 메서드 setName()을 포함하고 있습니다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 4
-----------------------------------------------------------------------------------------------------------
let user = {
  name: '',
  setName(value) {
    if (value.length < 4) {
      alert("입력하신 값이 너무 짧습니다. 네 글자 이상으로 구성된 이름을 입력하세요.");
      return;
    }
    this.name = value;
  }
};

user.setName("Pete");
alert(user.name);     // Pete

user.setName("");     // 너무 짧은 이름을 할당하려 함
-----------------------------------------------------------------------------------------------------------




접근자 프로퍼티를 사용한 "프로퍼티 값 읽기, 수정하기" 객체  (예시 코드 - 5 참조)
-----------------------------------------------------------------------------------------------------------
그러나 getter와 setter를 '실제' 프로퍼티 값을 감싸는 래퍼(wrapper)처럼 사용하면,
"메서드를 새로 만드는 일" 없이 프로퍼티 값을 원하는 대로 통제할 수 있습니다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 5
-----------------------------------------------------------------------------------------------------------
let user = {
  get name() {
    return this._name;
  },

  set name(value) {
    if (value.length < 4) {
      alert("입력하신 값이 너무 짧습니다. 네 글자 이상으로 구성된 이름을 입력하세요.");
      return;
    }
    this._name = value;
  }
};

user.name = "Pete";
alert(user.name);     // Pete

user.name = "";     // 너무 짧은 이름을 할당하려 함
-----------------------------------------------------------------------------------------------------------

ps.  (예시 코드 - 5 참조)
-----------------------------------------------------------------------------------------------------------
기술적으론 외부 코드에서 user._name을 사용해 이름에 바로 접근할 수 있습니다.
그러나 밑줄 (user._name) 로 시작하는 프로퍼티는 객체 내부에서만 활용하고,
외부에서는 건드리지 않는 것이 관습입니다.
위의 예제에서 user.name을 통해 프로퍼티에 접근하고 수정하는 것 처럼
user._name을 직접적으로 사용하지는 않는 것이 좋습니다.
-----------------------------------------------------------------------------------------------------------

===============================================================================





























[출처] : https://velog.io/@bigbrothershin/JavaScript-%EC%A0%91%EA%B7%BC%EC%9E%90-%ED%94%84%EB%A1%9C%ED%8D%BC%ED%8B%B0-getter-setter