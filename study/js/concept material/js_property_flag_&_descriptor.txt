===============================================================================

<프로퍼티 플래그&설명자>


플래그(flag)
-----------------------------------------------------------------------------------------------------------
객체 프로퍼티는 "값( key:value의 value )"에 더해 "플래그(flag)라 불리는 특별한 속성 세가지"를 갖는다.
플래그는 boolean값을 가진다. (true or false)


writable : 
true이면 값( key:value의 value )을 수정할 수 있습니다.
false라면 값( key:value의 value )을 쓰지 못 하고(non-writable) 읽기만 가능합니다.

enumerable :
true이면 반복문을 사용해 나열할 수 있습니다.
false라면 반복문을 사용해 나열할 수 없습니다.

configurable :
true이면 프로퍼티 삭제나 플래그 수정이 가능합니다.
false라면 프로퍼티 삭제와 플래그 수정이 불가능합니다.


평범한 방식으로 프로퍼티를 만들면 위 플래그 속성은 모두 true 값을 갖는다.
-----------------------------------------------------------------------------------------------------------





Object.getOwnPropertyDescriptor(obj, propertyName)  (예시 코드 - 1 참조)
-----------------------------------------------------------------------------------------------------------
Object.getOwnPropertyDescriptor 메서드로 특정 프로퍼티에 대한 정보를 모두 얻을 수 있다.
위 메서드를 호출하면 프로퍼티 설명자(descriptor)라 불리는 객체가 반환된다.
설명자는 말 그대로 프로퍼티의 값( key:value의 value )과 세 플래그에 대한 정보를 설명해준다.

프로퍼티 설명자(descriptor)라 불리는 "객체" = Object.getOwnPropertyDescriptor 메서드가 반환하는 값
-----------------------------------------------------------------------------------------------------------

예시 코드 - 1
-----------------------------------------------------------------------------------------------------------
let user = {
  name: "John"
};

let descriptor = Object.getOwnPropertyDescriptor(user, 'name');

/*
property descriptor:

{
  value: "John",
  writable: true,
  enumerable: true,
  configurable: true
}
*/
-----------------------------------------------------------------------------------------------------------





Object.defineproperty(obj, propertyName, descriptor)  (예시 코드 - 2 참조)
-----------------------------------------------------------------------------------------------------------
프로퍼티의 플래그를 변경할 수 있다.
이 메서드는 객체에 해당 프로퍼티가 있으면 플래그를 원하는대로 변경해준다.
프로퍼티가 없으면 인수로 넘겨받은 정보를 이용해 새로운 프로퍼티를 만든다.
이때 플래그 정보가 없으면 플래그 값은 자동으로 false가 된다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 2
-----------------------------------------------------------------------------------------------------------
let user = {};

Object.defineProperty(user, "name", {
  value: "John"
});

let descriptor = Object.getOwnPropertyDescriptor(user, 'name');

/*
{
  value: "John",
  writable: false,
  enumerable: false,
  configurable: false
}
 */
-----------------------------------------------------------------------------------------------------------




writable 플래그
-----------------------------------------------------------------------------------------------------------
true이면 값( key:value의 value )을 수정할 수 있습니다.
false라면 값( key:value의 value )을 쓰지 못 하고(non-writable) 읽기만 가능합니다.
-----------------------------------------------------------------------------------------------------------

enumerable 플래그
-----------------------------------------------------------------------------------------------------------
true이면 반복문을 사용해 나열할 수 있습니다.
false라면 반복문을 사용해 나열할 수 없습니다.
( 나열이 불가능한 프로퍼티는 for..in 반복문, Object.keys에도 배제됩니다. )
-----------------------------------------------------------------------------------------------------------

configurable 플래그  (예시 코드 - 3 참조)
-----------------------------------------------------------------------------------------------------------
true이면 프로퍼티 삭제나 플래그 수정이 가능합니다.
false라면 프로퍼티 삭제와 플래그 수정이 불가능합니다.


[configurable:false가 만드는 구체적 제약사항]

1. configurable 플래그를 수정할 수 없음
2. enumerable 플래그를 수정할 수 없음.
3. writable: false의 값을 true로 바꿀 수 없음(true를 false로 변경하는 것은 가능함).
4. 접근자 프로퍼티 get/set을 변경할 수 없음(새롭게 만드는 것은 가능함).


["non-configurable"은 "non-writable"과 다르다]

configurable 플래그가 false이더라도 writable 플래그가 true이면 프로퍼티 값을 변경할 수 있습니다.
configurable: false는 플래그 값 변경이나 프로퍼티 삭제를 막기 위해 만들어졌지,
프로퍼티 값 변경을 막기 위해 만들어진 게 아닙니다.


configurable:false인 프로퍼티 중 대표적인 예가 내장 객체 Math의 PI 프로퍼티 입니다.
이 프로퍼티는 쓰기와 열거, 구성이 불가능합니다.
-----------------------------------------------------------------------------------------------------------

예시 코드 - 3
-----------------------------------------------------------------------------------------------------------
let descriptor = Object.getOwnPropertyDescriptor(Math, 'PI');

/*
{
  value: 3.141592653589793,
  writable: false,
  enumerable: false,
  configurable: false
}
*/
-----------------------------------------------------------------------------------------------------------

===============================================================================










[출처] : https://ko.javascript.info/property-descriptors
[출처] : https://velog.io/@hyounglee/TIL-83












