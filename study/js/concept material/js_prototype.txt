=============================================

Prototype ==  Prototype Object +Prototype Link

=============================================




=============================================
Prototype Object

1. 첫 번째 포인트
------------------------------------------------------------------------------

<객체는 언제나 함수(Function)로 생성됩니다.>

function Person() {}     // => 함수
var personObject = new Person();     // => 함수로 객체를 생성

personObject 객체는 Person이라는 함수로 생성된 객체입니다.
이렇듯 언제나 객체는 함수에서 시작됩니다.
우리가 많이 쓰는 일반적인 객체 생성도 예외는 아닙니다.

var obj = {};

얼핏보면 함수랑 전혀 상관없는 코드로 보이지만 위 코드는 사실 다음 코드와 같습니다.

var obj = new Object();

위 코드에서 Object가 자바스크립트에서 기본적으로 제공하는 "함수"입니다.

Object와 마찬가지로 Function, Array도 모두 함수로 정의되어 있습니다. 

ps. 생성자(constructor)함수
->  함수를 만들 때처럼 function을 쓰긴 하지만 함수와는 달리 대문자로 시작하게 만듭니다.

-------------------------------------------------------------------------------



2. 두 번째 포인트
-------------------------------------------------------------------------------

<함수가 정의 될 때 2가지 일이 일어난다.>

1.해당 함수에 Constructor(생성자) 자격 부여

Constructor 자격이 부여되면 new를 통해 객체를 만들어 낼 수 있게 됩니다.
이것이 함수만 new 키워드를 사용할 수 있는 이유입니다.

2.해당 함수의 Prototype Object 생성 및 연결

함수를 정의하면 함수만 생성되는 것이 아니라 Prototype Object도 같이 생성이 됩니다.

생성된 함수는 prototype이라는 속성을 통해 Prototype Object에 접근할 수 있습니다.
(Prototype Object에 속성을 마음대로 추가 / 삭제 / 수정 / 읽기 작업을 수행할 수 있다.)
Prototype Object는 constructor와 __proto__를 가지고 있습니다.
constructor는 Prototype Object와 같이 생성되었던 함수를 가리키고 있고, __proto__는 Prototype Link입니다.

----------------------------------------------------------------------------------



3. 세 번째 포인트
----------------------------------------------------------------------------------

<Prototype Object 의 정의>

함수를 정의하면 다른 곳에 생성되는 Prototype Object는
new라는 연산자와 Prototype Object와 연결된 함수(Constructor)를 통해
생성된 모든 객체의 원형이 되는 객체이다.
그렇게 생성된 모든 객체가 프로토타입 객체를 참조한다.

----------------------------------------------------------------------------------

Prototype Link

4. 네 번째 포인트
----------------------------------------------------------------------------------

<__proto__와 프로토타입 체인의 이해>

__proto__속성은 모든 객체가 빠짐없이 가지고 있는 속성
__proto__는 객체가 생성될 때 조상이었던 함수(객체를 생성한 함수)의 Prototype Object를 가리킵니다.

function Person() {}

Person.prototype.eyes = 2;
Person.prototype.nose = 1;

var kim  = new Person();
var park = new Person();

console.log(kim.eyes); // => 2

kim객체가 eyes를 직접 가지고 있지 않기 때문에 eyes 속성을 찾을 때 까지 상위 프로토타입을 탐색합니다.
최상위인 Object함수의 Prototype Object까지 도달했는데도 못찾았을 경우 undefined를 리턴합니다.
이렇게 __proto__속성을 통해 상위 프로토타입(Prototype Object와 Prototype Link)과 연결되어있는 형태를
프로토타입 체이닝(Chaining)이라고 합니다.
이런 프로토타입 체인 구조 때문에 모든 객체는 Object함수의 자식이라 불리고,
Object함수의 Prototype Object에 있는 모든 속성을 사용할 수 있습니다.
Object함수의 Prototype Object의 __proto__ 속성은 null값을 가집니다.
한 가지 예를 들면 toString함수가 있겠습니다.

----------------------------------------------------------------------------------

========================================================================




========================================================================

JavaScript의 모든 객체에는 __proto__속성이 있어서
객체가 생성될 때 조상이었던 함수의 Prototype Object에 접근할 수 있습니다.
__proto__속성이 있기 때문에 코드의 재사용과 객체 지향적인 프로그래밍을 할 수 있습니다.


생성자 함수.prototype.constructor === 생성자 함수;     //true
생성자 함수.prototype === (생성자 함수로 만들어진 객체).__proto__;     //true
(생성자 함수로 만들어진 객체).__proto__.constructor === 생성자 함수;     //true

========================================================================











[출처] : https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67