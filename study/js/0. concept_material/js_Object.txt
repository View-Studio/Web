=============================================================================

객체란 데이터(프로퍼티, property)와 그 데이터에 관련한 동작(메서드, method)을 모두 포함할 수 있는 독립적 주체이다.

==============================================================================




==============================================================================

우리가 "자바스크립트에서는 원시 값을 제외한 나머지 값들(함수, 배열, 정규표현식 등)은 모두 객체이다."
라고 표현할 때 객체란 참조값을 저장하고, 참조에 의한 전달방식을 사용하고,
변경이 가능한(mutable) 객체/참조 타입을 의미하는 포괄적인 용어이다.

자바스크립트에서는 프로토타입 기반 객체지향 언어로서 다양한 객체 생성 방법이 존재한다.
그 중에는 [ 객체 리터럴, Object 생성자 함수, 생성자 함수, Object.create 메소드, 클래스(ES6) ]가 있다.

객체 리터럴은 중괄호({...}) 내에 0개 이상의 프로퍼티를 정의하여 값을 생성하는 표기법이다.

객체 리터럴의 중괄호({})는 코드 블록 의미하지 않는다.
코드 블록의 닫는 중괄호 뒤에는 세미콜론(;)이 오지 않는다.
하지만, 객체 리터럴은 값으로 평가되는 표현식이다.
따라서, 닫는 중괄호 뒤에 세미콜론을 붙인다.

==============================================================================




=============================================================================

---------------------------------------------------------------------------------------------------------------------------
프로퍼티: 객체의 상태를 나타내는 값(데이터)이며 키(key)와 값(value)으로 구성되어있다

프로퍼티 키
빈 문자열을 포함하는 모든 문자열 또는 symbol값이 올 수 있다.
프로퍼티 키가 식별자 네이밍 규칙 따르면 따옴표('') 생략 가능하지만 따르지 않으면 따옴표를 반드시 붙혀야한다.
프로퍼티 키의 이름이 같은 경우 나중에 실행된 프로퍼티가 덮어쓴다.
만약 프로퍼티 키가 숫자라면 따옴표는 붙지 않지만 내부적으로는 문자열로 변환된다. 따라서 정확히 말하면 숫자가 아니라 문자열이다.


프로퍼티 값
자바스크립트에서 사용할 수 있는 모든 값이 올 수 있다.
number, string, boolean 같은 원시타입은 물론 함수나 배열 같은 객체타입도 올 수 있다. 객체리터럴({}) 또한 가능하다.
-------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------------------
프로퍼티 접근 방법

1️.마침표 표기법( . ) - ( . )뒤에 따옴표 없는 식별자만 사용가능( 문자열 사용 불가, 숫자 사용 불가 )

2️.대괄호 표기법([ ]) - 대괄호 표기법은 대괄호 안에 반드시 따옴표로 감싼 문자열이 와야한다.
                           감싸지 않으면 식별자로 해석되기 때문이다. 
                           ( 따옴표로 감싸면 따옴표 없는 식별자가 가지는 값도 가져올 수 있다. )
                           프로퍼티는 배열이기 때문에 이런 접근이 가능하다.


프로퍼티 키가 식별자 네이밍 규칙을 따르는 경우는 마침표 표기법, 대괄호 표기법 둘 다 사용가능하나
따르지 않을 경우 대괄호 표기법만 가능하다.
객체에 존재하지 않는 프로퍼티에 접근하면 undefined를 반환한다.
프로퍼티 키가 숫자로 이루어진 문자열인 경우, 따옴표를 생략 가능하다.
--------------------------------------------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------------------------------------------
프로퍼티 값은 동적으로 갱신, 생성, 삭제가 가능하다.
이미 존재하는 프로퍼티에 값에 할당하면 프로퍼티 값이 갱신된다.
만약 존재하지 않는 프로퍼티에 값을 할당하면?? 
새롭게 생성된다.
프로퍼티 삭제는 delete 연산자를 사용하자.
없는 프로퍼티를 삭제해도 에러가 발생하지 않는다. 아무런 일도 발생하지 않는다.
--------------------------------------------------------------------------------------------------------------------------------
==================================================================================




===================================================================================

메소드: 객체의 프로퍼티를 참조하거나 조작하는 함수

자바스크립트에서 모든 값은 프로퍼티의 값이 될 수 있다.
자바스크립트의 함수는 일급 객체이므로 값이다.
따라서, 함수 또한 프로퍼티의 값이 될 수 있다.

(객체의 프로퍼티를 조작하지 않는 함수의 경우
메소드라 부르기보단 차라리 프로퍼티 값이 일반함수라고
말하는게 오해의 소지가 없을수도 있다고 생각한다.)
====================================================================================




====================================================================================

1급 객체: 다른 객체들에 대해 일반적으로 적용 가능한 연산을 모두 지원하는 객체를 가리킨다.

[조건]
1 - 변수에 할당(assignment)할 수 있다.
2 - 다른 함수를 인수로 전달 받는다.
3 - 다른 함수의 결과로서 리턴될 수 있다.

[1급 객체이기 때문에 할 수 있는 것]
1 - 고차함수(Higher order function)를 만들 수 있다.
2 - 콜백함수(callback)를 사용할 수 있다.

고차함수(Higher order function): 함수를 인수로 받거나 함수를 리턴하는 함수를 말한다.

콜백함수(callback): 인수(Argument)로 받는 함수이다.

====================================================================================





====================================================================================

<Javascript 의 객체 분류>

1. 네이티브 객체(Native Object)
2. 호스트 객체(Host Object)
3. 사용자정의 객체


네이티브 객체(Native Object)
--------------------------------------------------------------------------------------------------------------------------------
자바스크립트 언어 규약(ECMAScript)으로 정의되어진 객체.
애플리케이션 전역의 공통 기능을 제공한다.
네이티브 객체는 애플리케이션의 환경과 관계없이 언제나 사용할 수 있다.
네이티브 객체는 모든 built-in object(내장 객체)를 포함한다.


[네이티브 객체 종류]

Object, String, Number, Function, Array, RegExp, Date, Math, Boolean,
Error(+기타 에러관련 obj), Symbol(ES6), JSON, Promise, Proxy, Map, Set...
--------------------------------------------------------------------------------------------------------------------------------



호스트 객체(Host Object)
--------------------------------------------------------------------------------------------------------------------------------
실행 환경에서 제공하는 객체(OS, Web browser에 따라 제공 객체 달라짐)
네이티브객체가 아닌 객체는 모두 호스트 객체임.
window, XmlHttpRequest, HTMLElement 등의 DOM 노드 객체와 같이 호스트 환경에 정의된 객체.


[호스트 객체 종류]

전역객체(Global object) :
모든 객체의 유일한 최상위 객체 (브라우저의 window, 서버의 global 객체)
(Global object ≠ Global Objects)

BOM(Browser Object Model) :
브라우저 탭 또는 브라우저 창의 모델을 생성.
BOM의 최상위 객체는 window 객체(현재 브라우저 창 또는 탭을 표현)
→ ( window의 하위 객체 : location, history, document, navigator, screen )

DOM(Document Object Model) :
현재 웹페이지의 모델을 생성.
DOM의 최상위 객체는 document 객체로 전체 문서를 표현.
--------------------------------------------------------------------------------------------------------------------------------

====================================================================================














[출처] : https://velog.io/@jimmyjoo/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EA%B0%9D%EC%B2%B4%EB%A6%AC%ED%84%B0%EB%9F%B4

[출처] : https://velog.io/@reveloper-1311/%EC%9D%BC%EA%B8%89-%EA%B0%9D%EC%B2%B4First-Class-Object%EB%9E%80

[출처] : https://velog.io/@bangina/FE%EB%A9%B4%EC%A0%91%EB%8C%80%EB%B9%84-%ED%98%B8%EC%8A%A4%ED%8A%B8-%EA%B0%9D%EC%B2%B4Host-Objects%EC%99%80-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EA%B0%9D%EC%B2%B4Native-Objects