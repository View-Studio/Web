
< 함수 호출 스케줄링 >
===============================================================================

[ setTimeout ]
-----------------------------------------------------------------------------------------------------------
- 일정 시간이 지난 후에 함수를 한 번만 실행하는 메서드 -

~ 문법 ~
setTimeout( func | code, [delay], [arg1], [arg2], ... ) 



~ 특징 ~
(1). func | code 에는 실행하고자 하는 코드가 들어가고, 함수 또는 문자열 형태입니다.
     대개는 함수가 들어갑니다.

(2). delay 에는 실행 전 대기 시간이 들어가고, 단위는 밀리초이며 기본값은 0입니다.

(3). arg1, arg2 ... 에는 함수에 전달할 인수들이 들어갑니다.

(4). setTimeout은 함수의 참조 값을 받도록 정의되어 있는데
     setTimeout에 함수를 넘길 때, 함수 뒤에 () 을 붙이면
     함수 실행 결과가 전달되어 버립니다.



ex)

function sayHi() {
  alert('안녕하세요.');
}
setTimeout(sayHi, 1000);


function sayHi(who, phrase) {
  alert( who + ' 님, ' + phrase );
}
setTimeout(sayHi, 1000, "홍길동", "안녕하세요.");    // 홍길동 님, 안녕하세요.


setTimeout("alert('안녕하세요.')", 1000);


setTimeout(sayHi(), 1000);    // 특징(4)에서 설명한 잘못된 코드
-----------------------------------------------------------------------------------------------------------






[ setInterval ]
-----------------------------------------------------------------------------------------------------------
- 일정 시간이 지난 후에 함수를 실행하는 행동을 주기적으로 하는 메서드 -

~ 문법 ~
setInterval( func | code, [delay], [arg1], [arg2], ... ) 



~ 특징 ~
(1). func | code 에는 실행하고자 하는 코드가 들어가고, 함수 또는 문자열 형태입니다.
     대개는 함수가 들어갑니다.

(2). delay 에는 실행 전 대기 시간이 들어가고, 단위는 밀리초이며 기본값은 0입니다.

(3). arg1, arg2 ... 에는 함수에 전달할 인수들이 들어갑니다.

(4). 한 번 실행되고 끝나는게 아니라 주기적으로 실행된다

(5). alert/confirm/prompt 창이 떠 있는 동안에도 내부 타이머를 멈추지 않습니다.



ex)

// 2초(2000밀리초) 간격으로 메시지를 보여줌
let timerId = setInterval(() => alert('째깍'), 2000);
-----------------------------------------------------------------------------------------------------------







[ 중첩 setTimeout ]
-----------------------------------------------------------------------------------------------------------
- setTimeout을 이용해 일정 시간이 지난 후에 함수를 실행하는 행동을 주기적으로 하는 방법 -

~ 특징 ~
(1). setInterval을 사용하는 방법보다 유연하다.
     호출 결과에 따라 다음 호출을 원하는 방식으로 조정해 스케줄링 할 수 있기 때문입니다.

(2). 중첩 setTimeout을 이용하는 방법은 지연 간격을 보장하지만,
     setInterval은 이를 보장하지 않습니다.

(3). 이전 함수의 실행이 종료된 이후에 다음 함수 호출에 대한 계획이 세워진다.


ex)

var timerId = setTimeout(function tick() {
  alert('째깍');
  timerId = setTimeout(tick, 2000);    // (*)
}, 2000);
-----------------------------------------------------------------------------------------------------------






[ 가비지컬렉션과 setTimeout, setInterval ]
-----------------------------------------------------------------------------------------------------------
setInterval이나 setTimeout에 함수를 넘기면,함수에 대한 내부 참조가 새롭게 만들어지고
이 참조 정보는 스케줄러에 저장됩니다. 따라서 해당 함수를 참조하는 것이 없어도
setInterval과 setTimeout에 넘긴 함수는 가비지 컬렉션의 대상이 되지 않습니다.
스케줄러가 함수를 호출할 때까지 함수는 메모리에 유지되기 때문입니다.
setInterval의 경우는, clearInterval이 호출되기 전까지 함수에 대한 참조가 메모리에 유지됩니다.

그런데 이런 동작 방식에는 부작용이 하나 있습니다. 외부 렉시컬 환경을 참조하는 함수가 있다고 가정해 봅시다.
이 함수가 메모리에 남아있는 동안엔 외부 변수 역시 메모리에 남아있기 마련입니다.
그런데 이렇게 되면 실제 함수가 차지했어야 하는 공간보다 더 많은 메모리 공간이 사용됩니다.
이런 부작용을 방지하고 싶다면 스케줄링할 필요가 없어진 함수는 아무리 작더라도 취소하도록 합시다.
-----------------------------------------------------------------------------------------------------------
===============================================================================











[출처] : https://ko.javascript.info/settimeout-setinterval