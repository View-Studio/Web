
< 실행 컨텍스트 (Execution Context) >
===============================================================================

 - 실행할 코드에 제공할 "환경 정보"들을 모아놓은 객체 -


[ JS 엔진이 코드를 실행하기 위해 필요한 "환경 정보" ]
-----------------------------------------------------------------------------------------------------------

1. 변수 ( 전역 변수, 지역 변수, 매개 변수, 함수의 선언 )
2. arguments 객체
3. Scope
4. this

-----------------------------------------------------------------------------------------------------------


[ Execution Context의 종류 ]
-----------------------------------------------------------------------------------------------------------

1. Global Execution Context :
코드를 실행하며 단 한 개만 정의되는 전역 Context입니다.
global object를 생성하며 this 값에 global object를 참조합니다.
전역 실행 컨텍스트는 콜 스택에 가장 먼저 추가되며 앱이 종료 될 때 삭제됩니다.


2. Functional Execution Context :
함수가 실행 될 때 마다 정의되는 Context입니다.
전역 실행 컨텍스트가 단 한 번만 정의되는 것과 달리,
함수 실행 컨텍스트는 매 실행시마다 정의되며
함수 실행이 종료(return)되면 Call Stack에서 제거됩니다.


3. Eval Context :
eval 함수로 실행한 코드의 Context입니다.
보안상 취약한 점이 있어 비권장 함수이기 때문에 거의 사용하지 않습니다.

-----------------------------------------------------------------------------------------------------------


[ Execution Context 구성 ]
-----------------------------------------------------------------------------------------------------------

VariableEnvironment (lexical environment) :

(1) EnvironmentRecord (snapshot) (객체)
(2) OuterEnvironmentReference (snapshot) (객체)



LexicalEnvironment (lexical environment) :

(1) EnvironmentRecord (객체)
(2) OuterEnvironmentReference (객체)



ThisBinding (객체) :

this 식별자가 바라봐야 할 대상 객체

-----------------------------------------------------------------------------------------------------------


[ Execution Context 생명 주기 ]
-----------------------------------------------------------------------------------------------------------

(0) 코드의 전역 범위가 실행되며 Global Execution Context를 콜 스택에 추가
(1) 함수 호출(실행)

 - ( Creation Phase ) -
(2) Functional Execution Context를 콜 스택에 생성
(3) 해당 Functional Execution Context 관련 코드 실행을 위한 환경정보 수집
(4) Functional Execution Context에 환경정보 저장
- ( Creation Phase ) -

- ( Execution Phase ) -
(5) Functional Execution Context 관련 코드 실행(활성화)
- ( Execution Phase ) -

(6) 코드 실행을 끝내고 해당 Functional Execution Context를 콜 스택에서 삭제
(7) 앱 종료 시 Global Execution Context가 삭제됩니다

-----------------------------------------------------------------------------------------------------------


[ Execution Context "생성" & "실행" 과정 ]
-----------------------------------------------------------------------------------------------------------

 - Execution Context는 "Creation"단계에서 "생성"되고, "Execution"단계에서 "실행"된다.  -


~ 1. Creation Phase (실행 X) ~

Lexical Environment와 Variable Environment의 "정의"가 이루어집니다.
ThisBinding과 OuterEnvironmentReference를 "결정"하고,
EnvironmentRecord에 변수 식별자에 대한 메모리가 "매핑"되며
값의 할당은 선언 방식에 따라 다르게 이루어집니다

VariableEnvironment에는
var로 선언된 변수가 메모리에 매핑되며 초기값으로 undefined가 할당됩니다.
선언형 함수가 메모리에 매핑되며 함수 전체가 메모리에 할당됩니다.

LexicalEnvironment에는
let, const로 선언된 변수가 변수가 메모리에 매핑되지만 초기값은 할당되지 않습니다.



~ 2. Execution Phase ~

Execution은 코드를 위에서부터 읽으며 "실행"합니다.
변수 값이 할당되는 코드가 실행 될 경우
EnvironmentRecord에 저장된 식별자 메모리에 값을 수정 또는 할당합니다.
-----------------------------------------------------------------------------------------------------------

===============================================================================











< VariableEnvironment >
===============================================================================

[ VariableEnvironment의 특징 ]
-----------------------------------------------------------------------------------------------------------

var로 선언된 변수들을 위한 functional scope(함수 스코프)를 단위로 합니다
하나의 ExecutionContext안에 하나만 존재할 수 있다.
VariableEnvironment는 LexicalEnvironment를 상속한다.

-----------------------------------------------------------------------------------------------------------


[ VE가 가지는 프로퍼티 ]
-----------------------------------------------------------------------------------------------------------
EnvironmentRecord (snapshot) (객체)
OuterEnvironmentReference (snapshot) (객체)
-----------------------------------------------------------------------------------------------------------


[ EnvironmentRecord ]
-----------------------------------------------------------------------------------------------------------

~ VariableEnvironment의 EnvironmentRecord 가 하는 일 ~

VariableEnvironment 내에 식별자 바인딩을 기록합니다. ( 객체입니다. )



~ EnvironmentRecord의 구성 ~

(1) Declarative Environment Record
(2) Object Environment Record
(3) Global Environment Record



~ Declarative Environment Record ~

함수와 변수, this, super 등의 식별자 바인딩이 저장된다


VariableEnvironment 에서의 Declarative Environment Record 에서는
var로 선언된 변수가 메모리에 매핑되며 초기값으로 undefined가 할당됩니다.
변수 값 할당 코드가 실행되기 전 변수에 접근하게 되면 undefined 값을 얻게 됩니다.
할당 코드가 실행되고 난 뒤에는 해당 값으로 수정됩니다.
선언형 함수가 메모리에 매핑되며 함수 전체가 메모리에 할당됩니다.


-----------------------------------------------------------------------------------------------------------


[ OuterEnvironmentReference ]
-----------------------------------------------------------------------------------------------------------

~ VariableEnvironment의 OuterEnvironmentReference 가 하는 일 ~

lexical scope를 기준으로 상위 scope의 LexicalEnvironment를 참조합니다.
( 현재 호출된 함수가 "선언"된 ExecutionContext의 LexicalEnvironment를 참조한다 )



~ VariableEnvironment의 OuterEnvironmentReference 의 특징 ~

(1)
단방향 Linked List의 형태로 구현되어 있어서
하위 스코프에서 상위 스코프를 참조 하는 것만 가능하다. ( 상위에서 하위 참조 불가능 )

(2)
가장 먼저 생성되는 Global Execution Context는
VariableEnvironment의 OuterEnvironmentReference값으로 null을 갖습니다.
( Global Execution Context의 상위 스코프가 없기 때문이다. )

(3)
Functional Execution Context는 상위 스코프에 해당하는
LexicalEnvironment를 VariableEnvironment의 OuterEnvironmentReference값으로 갖습니다.

(4)
이렇게 OuterEnvironmentReference로 최하위 스코프부터 
최상위 스코프까지 이어져 있는 연결고리를 "스코프체인"이라고 하고
식별자를 탐색 할 때 사용됩니다.
( 지금은 Lexical nesting structure 라고 불립니다. )
( 여기서는 스코프체인 이라고 부르겠습니다. )

(5)
어떤 식별자를 Global Execution Context 의 LexicalEnvironment와 VariableEnvironment까지
올라가서 검색을 했는데도 찾지 못 했다면 undefined를 반환합니다.

-----------------------------------------------------------------------------------------------------------

===============================================================================













< LexicalEnvironment >
===============================================================================

[ LexicalEnvironment의 특징 ]
-----------------------------------------------------------------------------------------------------------

let과 const로 선언된 변수들을 위한 local lexical scope(블록 스코프)를 단위로 합니다
하나의 ExecutionContext안에 여러 개가 있을 수 있다. ( {} 블럭의 개수 만큼 )

-----------------------------------------------------------------------------------------------------------


[ LE가 가지는 프로퍼티 ]
-----------------------------------------------------------------------------------------------------------
EnvironmentRecord (객체)
OuterEnvironmentReference (객체)
-----------------------------------------------------------------------------------------------------------


[ EnvironmentRecord ]
-----------------------------------------------------------------------------------------------------------

~ LexicalEnvironment의 EnvironmentRecord 가 하는 일 ~

LexicalEnvironment 내에 식별자 바인딩을 기록합니다. ( 객체입니다. )



~ EnvironmentRecord의 구성 ~

(1) Declarative Environment Record
(2) Object Environment Record
(3) Global Environment Record



~ Declarative Environment Record ~

함수와 변수, this, super 등의 식별자 바인딩이 저장된다.


Lexical Environment 에서의 Declarative Environment Record 에서는
let, const로 선언된 변수가 메모리에 매핑되지만 초기값은 할당되지 않습니다.
변수 값 할당 코드가 실행되기 전 변수에 접근하게 되면 reference error가 발생합니다.
초기 값 할당 코드가 실행되고 난 뒤에 메모리에 값이 추가 됩니다.

-----------------------------------------------------------------------------------------------------------


[ OuterEnvironmentReference ]
-----------------------------------------------------------------------------------------------------------

~ LexicalEnvironment의 OuterEnvironmentReference 가 하는 일 ~

같은 Execution Context의 안에 있는 VariableEnvironment를  참조합니다.



~ LexicalEnvironment의 OuterEnvironmentReference 의 특징 ~

(1)
단방향 Linked List의 형태로 구현되어 있어서
하위 스코프에서 상위 스코프를 참조 하는 것만 가능하다. ( 상위에서 하위 참조 불가능 )

(2)
Functional Execution Context는 상위 블록스코프에 해당하는
LexicalEnvironment를 OuterEnvironmentReference값으로 갖습니다.

(3)
이렇게 OuterEnvironmentReference로 하나의 Execution Context의
최하위 블록스코프부터 최상위 블록스코프까지 이어져 있다

-----------------------------------------------------------------------------------------------------------

===============================================================================










< 용어설명 >
===============================================================================


[ 스코프 (Scope) ]
-----------------------------------------------------------------------------------------------------------

 - 식별자에 대한 유효 범위 -

스코프 생성 경우 :
ES5까지 : 함수에 의해서만 생성
ES6부터 : 블록 스코프( var적용 x )가 추가됨

-----------------------------------------------------------------------------------------------------------


[ 스코프 체인 (ScopeChain) ]
-----------------------------------------------------------------------------------------------------------

 - OuterEnvironmentReference로 최하위 스코프부터 최상위 스코프까지 이어져 있는 연결고리 -

-----------------------------------------------------------------------------------------------------------


[ 바인딩 (Binding) ]
-----------------------------------------------------------------------------------------------------------

 - 프로그램의 어떤 기본 단위가 가질 수 있는 구성요소의 구체적인 값, 성격을 확정하는 것 -


(예시 코드)

int num = 123;


num 는 변수의 "이름", int 는 변수의 "자료형", 123 은 변수의 "자료값"

위와 같이 이름, 자료형, 자료값에 각각 num, int, 123 이라는
구체적인 값을 할당하는 각각의 과정을 바인딩(Binding)이라고 한다
-----------------------------------------------------------------------------------------------------------

===============================================================================


























[출처] : https://dkje.github.io/2020/08/30/ExecutionContext/